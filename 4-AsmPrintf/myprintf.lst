     1                                  segment .text
     2                                  
     3                                  ;=================================================
     4                                  ; sys_write macro
     5                                  ;
     6                                  ; Args:     %1 - buffer
     7                                  ;           %2 - buffer size
     8                                  ;
     9                                  ; Destr:    rax, rcx, rdx, rdi, rsi, r11
    10                                  ;=================================================
    11                                  
    12                                  %macro SYS_WRITE 2
    13                                              mov rax, 0x01   ; sys_wryte
    14                                              mov rdi, 0x01   ; stdout
    15                                              mov rsi, %1     ; buffer
    16                                              mov rdx, %2     ; buffer size
    17                                              syscall
    18                                  %endmacro
    19                                  
    20                                  ;=================================================
    21                                  
    22                                  ;=================================================
    23                                  ; flushes Buffer to stdout
    24                                  ;
    25                                  ; Args:     r13 - buffer size
    26                                  ;
    27                                  ; Destr:    rax = 0x01
    28                                  ;           rdi = 0x01
    29                                  ;           rsi = offset Buffer
    30                                  ;           rcx
    31                                  ;           r11
    32                                  ;=================================================
    33                                  %macro FLUSH_BUFFER 0
    34                                              push rdx
    35                                  
    36                                              SYS_WRITE Buffer, r13
    37                                  
    38                                              ; reset buffer size
    39                                              mov dword [BufferSize], 0
    40                                              xor r13, r13
    41                                  
    42                                              pop rdx
    43                                  %endmacro
    44                                  ;=================================================
    45                                  
    46                                  ;=================================================
    47                                  ; Flushes buffer if buffer is not empty
    48                                  ;
    49                                  ; Assumes:  r13 - buffer size
    50                                  ;
    51                                  ; Destr:    rax, rdi, rsi, rcx, r11
    52                                  ;=================================================
    53                                  %macro  FLUSH_IF_NEEDED 0
    54                                  
    55                                              test r13, r13 ; cmp r13, 0
    56                                              je %%isEmptyBuf
    57                                  
    58                                              FLUSH_BUFFER
    59                                  %%isEmptyBuf:
    60                                  
    61                                  %endmacro
    62                                  ;=================================================
    63                                  
    64                                  
    65                                  ;=================================================
    66                                  ; Writes one symbol to Buffer
    67                                  ;
    68                                  ; Args:     %1 - symbol to write
    69                                  ;
    70                                  ; Assumes:  r13 - buffer size
    71                                  ;
    72                                  ; Destr:    rax, rdi, rsi, rcx, r11
    73                                  ;=================================================
    74                                  %macro WRITE_TO_BUF 1
    75                                  
    76                                              cmp r13, BufCapacity
    77                                              jb %%noFlush
    78                                  
    79                                              FLUSH_BUFFER
    80                                  %%noFlush:
    81                                  
    82                                              mov byte [Buffer + r13], %1
    83                                              inc r8d
    84                                              inc r13
    85                                  %endmacro
    86                                  ;=================================================
    87                                  
    88                                  ;=================================================
    89                                  ; Checks if current argument is on border between reg and stack arguments
    90                                  ;=================================================
    91                                  %macro CHECK_REG_STACK_ARGS_BORDER 0
    92                                  
    93                                              test r15, r15
    94                                              jne %%Float
    95                                              ; no float
    96                                  
    97                                              cmp r10, rbp
    98                                              jne %%Exit
    99                                              add r10, 16 + 8 * SavedArgs ; ret + ret2 + SavedArgs
   100                                  
   101                                              jmp %%Exit
   102                                  %%Float:
   103                                              lea rax, [rbp - 64]
   104                                  
   105                                              cmp r10, rax
   106                                              jne %%Exit
   107                                  
   108                                              cmp r14, rbp
   109                                              jb %%XmmArgsExist
   110                                  
   111                                              mov r10, r14
   112                                              jmp %%Exit
   113                                  
   114                                  %%XmmArgsExist:
   115                                              lea r10, [rbp + 16 + 8 * SavedArgs] ; ret + ret2 + SavedArgs
   116                                  
   117                                  
   118                                  %%Exit:
   119                                  %endmacro
   120                                  ;=================================================
   121                                  
   122                                  ;=================================================
   123                                  ; Checks if current argument is on border between reg and stack arguments
   124                                  ;=================================================
   125                                  %macro CHECK_REG_STACK_FLOAT_ARGS_BORDER 0
   126                                  
   127                                              neg r15
   128                                              lea rax, [rbp + 8 * r15] ; rbp - 8 * r15
   129                                              neg r15
   130                                  
   131                                              cmp r14, rax
   132                                              jae %%NotXmmArgsExist
   133                                  
   134                                              cmp r10, rbp
   135                                              jae %%NotRegsArgsExist
   136                                  
   137                                              lea r14, [rbp + 16 + 8 * SavedArgs] ; ret + ret2 + SavedArgs
   138                                  
   139                                              jmp %%NotXmmArgsExist
   140                                  %%NotRegsArgsExist:
   141                                              mov r14, r10
   142                                  
   143                                  %%NotXmmArgsExist:
   144                                  %endmacro
   145                                  ;=================================================
   146                                  
   147                                  ;=================================================
   148                                  ; Increments args pointers
   149                                  ;=================================================
   150                                  %macro INC_ARGS_PTRS 0
   151                                  
   152                                              cmp r10, rbp
   153                                              jb %%regsLeft
   154                                              cmp r14, rbp
   155                                              jb %%regsLeft
   156                                  
   157                                              add r14, 8
   158                                  %%regsLeft:
   159                                              add r10, 8
   160                                  %endmacro
   161                                  ;=================================================
   162                                  
   163                                  ;-------------------------------------------------
   164                                  ; int __stdcall myprintf(const char* format, ...);
   165                                  ;
   166                                  ;
   167                                  ; Destr: rax, rcx, rdx, rsi, rdi, r8d, r9, r10, r11
   168                                  ;
   169                                  ;-------------------------------------------------
   170                                  global _Z8myprintfPKcz
   171                                  _Z8myprintfPKcz:
   172                                  
   173                                  SavedArgs   equ 5 ; !!! needed for stack args addr calc
   174 00000000 53                                  push rbx
   175 00000001 4154                                push r12
   176 00000003 4155                                push r13
   177 00000005 4156                                push r14
   178 00000007 4157                                push r15
   179                                  
   180 00000009 55                                  push rbp
   181 0000000A 4889E5                              mov rbp, rsp
   182                                  
   183                                              ; push register arguments (only variadic)
   184                                  
   185 0000000D 4D31FF                              xor r15, r15
   186 00000010 4D31F6                              xor r14, r14
   187                                  
   188 00000013 84C0                                test al, al
   189 00000015 743C                                je .noFloats
   190                                  
   191 00000017 660FD64424F8                        movq [rsp - 8],  xmm0
   192 0000001D 660FD64C24F0                        movq [rsp - 16], xmm1
   193 00000023 660FD65424E8                        movq [rsp - 24], xmm2
   194 00000029 660FD65C24E0                        movq [rsp - 32], xmm3
   195 0000002F 660FD66424D8                        movq [rsp - 40], xmm4
   196 00000035 660FD66C24D0                        movq [rsp - 48], xmm5
   197 0000003B 660FD67424C8                        movq [rsp - 56], xmm6
   198 00000041 660FD67C24C0                        movq [rsp - 64], xmm7
   199                                  
   200 00000047 4C8D7424F8                          lea r14, [rsp - 8]          ; r14 = rsp         - float args stack ptr
   201 0000004C 4188C7                              mov r15b, al                ; r15 = al          - number of floats in xmm's
   202                                  
   203 0000004F 4883EC40                            sub rsp, 64
   204                                  
   205                                  .noFloats:
   206 00000053 4151                                push r9
   207 00000055 4150                                push r8
   208 00000057 51                                  push rcx
   209 00000058 52                                  push rdx
   210 00000059 56                                  push rsi
   211 0000005A 4989F9                              mov r9, rdi
   212                                  
   213 0000005D 4989E2                              mov r10, rsp                ; r10 = rsp         - args stack ptr
   214                                  
   215 00000060 4831DB                              xor rbx, rbx ; required for jump table lea [rbx + const]
   216                                  
   217 00000063 448B2C25[50000000]                  mov r13d, dword [BufferSize]; r13 = [BufSize]   - buffer size
   218 0000006B 418A19                              mov bl, [r9]                ; bl  = [r9]        - current fmt symbol
   219 0000006E 4D31C0                              xor r8, r8                  ; r8d = 0           - symbol counter
   220                                                                          ; r9                - format string ptr
   221 00000071 E907010000                          jmp .whileFmtEnter
   222                                  .whileFmtBody:
   223                                  
   224 00000076 80FB25                              cmp bl, '%'
   225 00000079 0F85BC000000                        jne .NotSpecialSymbol
   226                                  
   227                                              ; go to next format symbol
   228 0000007F 49FFC1                              inc r9
   229 00000082 418A19                              mov bl, [r9]
   230                                  
   231                                              ; main switch
   232                                              ; options in ASCII order: %, <large gap>, b,  c,  d,  f,  n,  o,  s,  x
   233                                              ;                         37              98  99 100 102 110 111 115 120
   234 00000085 80FB25                              cmp bl, '%'
   235 00000088 753E                                jne .is_not_percent
   236                                              WRITE_TO_BUF bl
    75                              <1> 
    76 0000008A 4983FD40            <1>  cmp r13, BufCapacity
    77 0000008E 7229                <1>  jb %%noFlush
    78                              <1> 
    79                              <1>  FLUSH_BUFFER
    34 00000090 52                  <2>  push rdx
    35                              <2> 
    36                              <2>  SYS_WRITE Buffer, r13
    13 00000091 B801000000          <3>  mov rax, 0x01
    14 00000096 BF01000000          <3>  mov rdi, 0x01
    15 0000009B 48BE-               <3>  mov rsi, %1
    15 0000009D [1000000000000000]  <3>
    16 000000A5 4C89EA              <3>  mov rdx, %2
    17 000000A8 0F05                <3>  syscall
    37                              <2> 
    38                              <2> 
    39 000000AA C70425[50000000]00- <2>  mov dword [BufferSize], 0
    39 000000B2 000000              <2>
    40 000000B5 4D31ED              <2>  xor r13, r13
    41                              <2> 
    42 000000B8 5A                  <2>  pop rdx
    80                              <1> %%noFlush:
    81                              <1> 
    82 000000B9 41889D[10000000]    <1>  mov byte [Buffer + r13], %1
    83 000000C0 41FFC0              <1>  inc r8d
    84 000000C3 49FFC5              <1>  inc r13
   237 000000C6 EB71                                jmp .switch_end
   238                                  .is_not_percent:
   239                                  
   240 000000C8 80FB62                              cmp bl, 'b'
   241 000000CB 7247                                jb .spec_error
   242 000000CD 80FB78                              cmp bl, 'x'
   243 000000D0 7742                                ja .spec_error
   244                                  
   245 000000D2 488B0CDD[1FFDFFFF]                  mov rcx, printf_jmp_table[(rbx - 'b') * 8]
   246 000000DA FFE1                                jmp rcx
   247                                  
   248 000000DC E8EB000000              .spec_char: call printf_spec_char
   249 000000E1 EB56                                jmp .switch_end
   250 000000E3 E8EA020000              .spec_bin:  call printf_spec_binary
   251 000000E8 EB4F                                jmp .switch_end
   252 000000EA E847040000              .spec_oct:  call printf_spec_octal
   253 000000EF EB48                                jmp .switch_end
   254 000000F1 E8D9010000              .spec_dec:  call printf_spec_decimal
   255 000000F6 EB41                                jmp .switch_end
   256 000000F8 E861050000              .spec_hex:  call printf_spec_hex
   257 000000FD EB3A                                jmp .switch_end
   258 000000FF E841010000              .spec_str:  call printf_spec_string
   259 00000104 EB33                                jmp .switch_end
   260 00000106 E8B8060000              .spec_float:call printf_spec_float
   261 0000010B EB2C                                jmp .switch_end
   262 0000010D E8D4070000              .spec_n:    call printf_spec_n
   263 00000112 EB25                                jmp .switch_end
   264                                  
   265                                  
   266                                  .spec_error:
   267                                              SYS_WRITE UnknownSpecErrorMsg, UnknownSpecErrorMsgLen
    13 00000114 B801000000          <1>  mov rax, 0x01
    14 00000119 BF01000000          <1>  mov rdi, 0x01
    15 0000011E 48BE-               <1>  mov rsi, %1
    15 00000120 [0000000000000000]  <1>
    16 00000128 BA27000000          <1>  mov rdx, %2
    17 0000012D 0F05                <1>  syscall
   268 0000012F B8FFFFFFFF                          mov eax, -1
   269 00000134 E988000000                          jmp .return
   270                                  .switch_end:
   271                                  
   272                                  
   273 00000139 EB3C                                jmp .whileFmtClause
   274                                  .NotSpecialSymbol:
   275                                              WRITE_TO_BUF bl
    75                              <1> 
    76 0000013B 4983FD40            <1>  cmp r13, BufCapacity
    77 0000013F 7229                <1>  jb %%noFlush
    78                              <1> 
    79                              <1>  FLUSH_BUFFER
    34 00000141 52                  <2>  push rdx
    35                              <2> 
    36                              <2>  SYS_WRITE Buffer, r13
    13 00000142 B801000000          <3>  mov rax, 0x01
    14 00000147 BF01000000          <3>  mov rdi, 0x01
    15 0000014C 48BE-               <3>  mov rsi, %1
    15 0000014E [1000000000000000]  <3>
    16 00000156 4C89EA              <3>  mov rdx, %2
    17 00000159 0F05                <3>  syscall
    37                              <2> 
    38                              <2> 
    39 0000015B C70425[50000000]00- <2>  mov dword [BufferSize], 0
    39 00000163 000000              <2>
    40 00000166 4D31ED              <2>  xor r13, r13
    41                              <2> 
    42 00000169 5A                  <2>  pop rdx
    80                              <1> %%noFlush:
    81                              <1> 
    82 0000016A 41889D[10000000]    <1>  mov byte [Buffer + r13], %1
    83 00000171 41FFC0              <1>  inc r8d
    84 00000174 49FFC5              <1>  inc r13
   276                                  
   277                                  .whileFmtClause:
   278 00000177 49FFC1                              inc r9
   279 0000017A 418A19                              mov bl, [r9]
   280                                  .whileFmtEnter:
   281 0000017D 84DB                                test bl, bl ; cmp bl, 0
   282 0000017F 0F85F1FEFFFF                        jne .whileFmtBody
   283                                  
   284                                  
   285                                              ; flush buffer
   286                                              FLUSH_IF_NEEDED
    54                              <1> 
    55 00000185 4D85ED              <1>  test r13, r13
    56 00000188 7429                <1>  je %%isEmptyBuf
    57                              <1> 
    58                              <1>  FLUSH_BUFFER
    34 0000018A 52                  <2>  push rdx
    35                              <2> 
    36                              <2>  SYS_WRITE Buffer, r13
    13 0000018B B801000000          <3>  mov rax, 0x01
    14 00000190 BF01000000          <3>  mov rdi, 0x01
    15 00000195 48BE-               <3>  mov rsi, %1
    15 00000197 [1000000000000000]  <3>
    16 0000019F 4C89EA              <3>  mov rdx, %2
    17 000001A2 0F05                <3>  syscall
    37                              <2> 
    38                              <2> 
    39 000001A4 C70425[50000000]00- <2>  mov dword [BufferSize], 0
    39 000001AC 000000              <2>
    40 000001AF 4D31ED              <2>  xor r13, r13
    41                              <2> 
    42 000001B2 5A                  <2>  pop rdx
    59                              <1> %%isEmptyBuf:
    60                              <1> 
   287                                  
   288 000001B3 C70425[50000000]00-                 mov dword [BufferSize], 0
   288 000001BB 000000             
   289                                  
   290 000001BE 4489C0                              mov eax, r8d
   291                                  .return:
   292 000001C1 C9                                  leave
   293                                  
   294 000001C2 415F                                pop r15
   295 000001C4 415E                                pop r14
   296 000001C6 415D                                pop r13
   297 000001C8 415C                                pop r12
   298 000001CA 5B                                  pop rbx
   299 000001CB C3                                  ret
   300                                  ;-------------------------------------------------
   301                                  
   302                                  
   303                                  
   304                                  ;-------------------------------------------------
   305                                  ; prints char from argument
   306                                  ;
   307                                  ; Args:     r10 - args stack ptr
   308                                  ;           r13 - buffer size
   309                                  ;           r8d - symbol counter
   310                                  ;           r9  - format string ptr
   311                                  ;
   312                                  ; Destr:    bl, rax, rdi, rsi, rcx, r11
   313                                  ;-------------------------------------------------
   314                                  printf_spec_char:
   315                                  
   316                                              CHECK_REG_STACK_ARGS_BORDER
    92                              <1> 
    93 000001CC 4D85FF              <1>  test r15, r15
    94 000001CF 750B                <1>  jne %%Float
    95                              <1> 
    96                              <1> 
    97 000001D1 4939EA              <1>  cmp r10, rbp
    98 000001D4 751D                <1>  jne %%Exit
    99 000001D6 4983C238            <1>  add r10, 16 + 8 * SavedArgs
   100                              <1> 
   101 000001DA EB17                <1>  jmp %%Exit
   102                              <1> %%Float:
   103 000001DC 488D45C0            <1>  lea rax, [rbp - 64]
   104                              <1> 
   105 000001E0 4939C2              <1>  cmp r10, rax
   106 000001E3 750E                <1>  jne %%Exit
   107                              <1> 
   108 000001E5 4939EE              <1>  cmp r14, rbp
   109 000001E8 7205                <1>  jb %%XmmArgsExist
   110                              <1> 
   111 000001EA 4D89F2              <1>  mov r10, r14
   112 000001ED EB04                <1>  jmp %%Exit
   113                              <1> 
   114                              <1> %%XmmArgsExist:
   115 000001EF 4C8D5538            <1>  lea r10, [rbp + 16 + 8 * SavedArgs]
   116                              <1> 
   117                              <1> 
   118                              <1> %%Exit:
   317                                  
   318 000001F3 418A1A                              mov bl, [r10]
   319                                              WRITE_TO_BUF bl
    75                              <1> 
    76 000001F6 4983FD40            <1>  cmp r13, BufCapacity
    77 000001FA 7229                <1>  jb %%noFlush
    78                              <1> 
    79                              <1>  FLUSH_BUFFER
    34 000001FC 52                  <2>  push rdx
    35                              <2> 
    36                              <2>  SYS_WRITE Buffer, r13
    13 000001FD B801000000          <3>  mov rax, 0x01
    14 00000202 BF01000000          <3>  mov rdi, 0x01
    15 00000207 48BE-               <3>  mov rsi, %1
    15 00000209 [1000000000000000]  <3>
    16 00000211 4C89EA              <3>  mov rdx, %2
    17 00000214 0F05                <3>  syscall
    37                              <2> 
    38                              <2> 
    39 00000216 C70425[50000000]00- <2>  mov dword [BufferSize], 0
    39 0000021E 000000              <2>
    40 00000221 4D31ED              <2>  xor r13, r13
    41                              <2> 
    42 00000224 5A                  <2>  pop rdx
    80                              <1> %%noFlush:
    81                              <1> 
    82 00000225 41889D[10000000]    <1>  mov byte [Buffer + r13], %1
    83 0000022C 41FFC0              <1>  inc r8d
    84 0000022F 49FFC5              <1>  inc r13
   320                                  
   321                                              INC_ARGS_PTRS
   151                              <1> 
   152 00000232 4939EA              <1>  cmp r10, rbp
   153 00000235 7209                <1>  jb %%regsLeft
   154 00000237 4939EE              <1>  cmp r14, rbp
   155 0000023A 7204                <1>  jb %%regsLeft
   156                              <1> 
   157 0000023C 4983C608            <1>  add r14, 8
   158                              <1> %%regsLeft:
   159 00000240 4983C208            <1>  add r10, 8
   322                                  
   323 00000244 C3                                  ret
   324                                  ;-------------------------------------------------
   325                                  
   326                                  ;-------------------------------------------------
   327                                  ; prints string from argument
   328                                  ;
   329                                  ; Args:     r10 - args stack ptr
   330                                  ;           r13 - buffer size
   331                                  ;           r8d - symbol counter
   332                                  ;           r9  - format string ptr
   333                                  ;
   334                                  ; Destr:    bl, rax, rdi, rsi, rcx, r11, r12
   335                                  ;-------------------------------------------------
   336                                  printf_spec_string:
   337                                  
   338                                              CHECK_REG_STACK_ARGS_BORDER
    92                              <1> 
    93 00000245 4D85FF              <1>  test r15, r15
    94 00000248 750B                <1>  jne %%Float
    95                              <1> 
    96                              <1> 
    97 0000024A 4939EA              <1>  cmp r10, rbp
    98 0000024D 751D                <1>  jne %%Exit
    99 0000024F 4983C238            <1>  add r10, 16 + 8 * SavedArgs
   100                              <1> 
   101 00000253 EB17                <1>  jmp %%Exit
   102                              <1> %%Float:
   103 00000255 488D45C0            <1>  lea rax, [rbp - 64]
   104                              <1> 
   105 00000259 4939C2              <1>  cmp r10, rax
   106 0000025C 750E                <1>  jne %%Exit
   107                              <1> 
   108 0000025E 4939EE              <1>  cmp r14, rbp
   109 00000261 7205                <1>  jb %%XmmArgsExist
   110                              <1> 
   111 00000263 4D89F2              <1>  mov r10, r14
   112 00000266 EB04                <1>  jmp %%Exit
   113                              <1> 
   114                              <1> %%XmmArgsExist:
   115 00000268 4C8D5538            <1>  lea r10, [rbp + 16 + 8 * SavedArgs]
   116                              <1> 
   117                              <1> 
   118                              <1> %%Exit:
   339                                  
   340 0000026C 4D8B22                              mov r12, [r10]
   341 0000026F 418A1C24                            mov bl, [r12]
   342                                  
   343 00000273 EB43                                jmp .whileEnter
   344                                  .whileBody:
   345                                              WRITE_TO_BUF bl
    75                              <1> 
    76 00000275 4983FD40            <1>  cmp r13, BufCapacity
    77 00000279 7229                <1>  jb %%noFlush
    78                              <1> 
    79                              <1>  FLUSH_BUFFER
    34 0000027B 52                  <2>  push rdx
    35                              <2> 
    36                              <2>  SYS_WRITE Buffer, r13
    13 0000027C B801000000          <3>  mov rax, 0x01
    14 00000281 BF01000000          <3>  mov rdi, 0x01
    15 00000286 48BE-               <3>  mov rsi, %1
    15 00000288 [1000000000000000]  <3>
    16 00000290 4C89EA              <3>  mov rdx, %2
    17 00000293 0F05                <3>  syscall
    37                              <2> 
    38                              <2> 
    39 00000295 C70425[50000000]00- <2>  mov dword [BufferSize], 0
    39 0000029D 000000              <2>
    40 000002A0 4D31ED              <2>  xor r13, r13
    41                              <2> 
    42 000002A3 5A                  <2>  pop rdx
    80                              <1> %%noFlush:
    81                              <1> 
    82 000002A4 41889D[10000000]    <1>  mov byte [Buffer + r13], %1
    83 000002AB 41FFC0              <1>  inc r8d
    84 000002AE 49FFC5              <1>  inc r13
   346                                  
   347                                  
   348 000002B1 49FFC4                              inc r12
   349 000002B4 418A1C24                            mov bl, [r12]
   350                                  .whileEnter:
   351 000002B8 84DB                                test bl, bl ; cmp bl, 0
   352 000002BA 75B9                                jne .whileBody
   353                                  
   354                                              INC_ARGS_PTRS
   151                              <1> 
   152 000002BC 4939EA              <1>  cmp r10, rbp
   153 000002BF 7209                <1>  jb %%regsLeft
   154 000002C1 4939EE              <1>  cmp r14, rbp
   155 000002C4 7204                <1>  jb %%regsLeft
   156                              <1> 
   157 000002C6 4983C608            <1>  add r14, 8
   158                              <1> %%regsLeft:
   159 000002CA 4983C208            <1>  add r10, 8
   355                                  
   356 000002CE C3                                  ret
   357                                  ;-------------------------------------------------
   358                                  
   359                                  ;-------------------------------------------------
   360                                  ; prints decimal argument
   361                                  ;
   362                                  ; Args:     r10 - args stack ptr
   363                                  ;           r13 - buffer size
   364                                  ;           r8d - symbol counter
   365                                  ;
   366                                  ; Destr:    rax, rbx, rcx, rdx, rdi, rsi, r11, r12
   367                                  ;-------------------------------------------------
   368                                  printf_spec_decimal:
   369                                  
   370                                              CHECK_REG_STACK_ARGS_BORDER
    92                              <1> 
    93 000002CF 4D85FF              <1>  test r15, r15
    94 000002D2 750B                <1>  jne %%Float
    95                              <1> 
    96                              <1> 
    97 000002D4 4939EA              <1>  cmp r10, rbp
    98 000002D7 751D                <1>  jne %%Exit
    99 000002D9 4983C238            <1>  add r10, 16 + 8 * SavedArgs
   100                              <1> 
   101 000002DD EB17                <1>  jmp %%Exit
   102                              <1> %%Float:
   103 000002DF 488D45C0            <1>  lea rax, [rbp - 64]
   104                              <1> 
   105 000002E3 4939C2              <1>  cmp r10, rax
   106 000002E6 750E                <1>  jne %%Exit
   107                              <1> 
   108 000002E8 4939EE              <1>  cmp r14, rbp
   109 000002EB 7205                <1>  jb %%XmmArgsExist
   110                              <1> 
   111 000002ED 4D89F2              <1>  mov r10, r14
   112 000002F0 EB04                <1>  jmp %%Exit
   113                              <1> 
   114                              <1> %%XmmArgsExist:
   115 000002F2 4C8D5538            <1>  lea r10, [rbp + 16 + 8 * SavedArgs]
   116                              <1> 
   117                              <1> 
   118                              <1> %%Exit:
   371                                  
   372 000002F6 418B02                              mov eax, [r10]
   373                                  
   374 000002F9 85C0                                test eax, eax
   375 000002FB 7D41                                jge .isPositive
   376                                  
   377                                              ; is negative
   378 000002FD 50                                  push rax
   379                                              WRITE_TO_BUF '-'
    75                              <1> 
    76 000002FE 4983FD40            <1>  cmp r13, BufCapacity
    77 00000302 7229                <1>  jb %%noFlush
    78                              <1> 
    79                              <1>  FLUSH_BUFFER
    34 00000304 52                  <2>  push rdx
    35                              <2> 
    36                              <2>  SYS_WRITE Buffer, r13
    13 00000305 B801000000          <3>  mov rax, 0x01
    14 0000030A BF01000000          <3>  mov rdi, 0x01
    15 0000030F 48BE-               <3>  mov rsi, %1
    15 00000311 [1000000000000000]  <3>
    16 00000319 4C89EA              <3>  mov rdx, %2
    17 0000031C 0F05                <3>  syscall
    37                              <2> 
    38                              <2> 
    39 0000031E C70425[50000000]00- <2>  mov dword [BufferSize], 0
    39 00000326 000000              <2>
    40 00000329 4D31ED              <2>  xor r13, r13
    41                              <2> 
    42 0000032C 5A                  <2>  pop rdx
    80                              <1> %%noFlush:
    81                              <1> 
    82 0000032D 41C685[10000000]2D  <1>  mov byte [Buffer + r13], %1
    83 00000335 41FFC0              <1>  inc r8d
    84 00000338 49FFC5              <1>  inc r13
   380 0000033B 58                                  pop rax
   381                                  
   382 0000033C F7D8                                neg eax
   383                                  
   384                                  .isPositive:
   385                                  
   386 0000033E 50                                  push rax
   387                                              FLUSH_IF_NEEDED
    54                              <1> 
    55 0000033F 4D85ED              <1>  test r13, r13
    56 00000342 7429                <1>  je %%isEmptyBuf
    57                              <1> 
    58                              <1>  FLUSH_BUFFER
    34 00000344 52                  <2>  push rdx
    35                              <2> 
    36                              <2>  SYS_WRITE Buffer, r13
    13 00000345 B801000000          <3>  mov rax, 0x01
    14 0000034A BF01000000          <3>  mov rdi, 0x01
    15 0000034F 48BE-               <3>  mov rsi, %1
    15 00000351 [1000000000000000]  <3>
    16 00000359 4C89EA              <3>  mov rdx, %2
    17 0000035C 0F05                <3>  syscall
    37                              <2> 
    38                              <2> 
    39 0000035E C70425[50000000]00- <2>  mov dword [BufferSize], 0
    39 00000366 000000              <2>
    40 00000369 4D31ED              <2>  xor r13, r13
    41                              <2> 
    42 0000036C 5A                  <2>  pop rdx
    59                              <1> %%isEmptyBuf:
    60                              <1> 
   388 0000036D 58                                  pop rax
   389                                  
   390 0000036E 4C8D2C25[4F000000]                  lea r13, [Buffer + BufCapacity - 1] ; r13 - output str pointer
   391                                  
   392 00000376 41BC0A000000                        mov r12d, 10 ; base
   393                                  .whileBody:
   394 0000037C 4831D2                              xor rdx, rdx
   395 0000037F 41F7F4                              div r12d
   396                                              ; eax = div
   397                                              ; edx = mod
   398                                  
   399 00000382 8A92[00000000]                      mov dl, HexTable[rdx]
   400 00000388 41885500                            mov byte [r13], dl
   401 0000038C 49FFCD                              dec r13
   402                                  
   403                                  .whileClause:
   404 0000038F 85C0                                test eax, eax
   405 00000391 75E9                                jne .whileBody
   406                                  
   407 00000393 49BB-                               mov r11, Buffer + BufCapacity - 1
   407 00000395 [4F00000000000000] 
   408 0000039D 4D29EB                              sub r11, r13
   409                                  
   410 000003A0 4153                                push r11
   411                                  
   412 000003A2 49FFC5                              inc r13
   413                                              SYS_WRITE r13, r11
    13 000003A5 B801000000          <1>  mov rax, 0x01
    14 000003AA BF01000000          <1>  mov rdi, 0x01
    15 000003AF 4C89EE              <1>  mov rsi, %1
    16 000003B2 4C89DA              <1>  mov rdx, %2
    17 000003B5 0F05                <1>  syscall
   414                                  
   415 000003B7 415B                                pop r11
   416 000003B9 4D01D8                              add r8, r11
   417                                  
   418 000003BC 4D31ED                              xor r13, r13 ; buffer is flushed
   419                                  
   420                                              INC_ARGS_PTRS
   151                              <1> 
   152 000003BF 4939EA              <1>  cmp r10, rbp
   153 000003C2 7209                <1>  jb %%regsLeft
   154 000003C4 4939EE              <1>  cmp r14, rbp
   155 000003C7 7204                <1>  jb %%regsLeft
   156                              <1> 
   157 000003C9 4983C608            <1>  add r14, 8
   158                              <1> %%regsLeft:
   159 000003CD 4983C208            <1>  add r10, 8
   421                                  
   422 000003D1 C3                                  ret
   423                                  ;-------------------------------------------------
   424                                  
   425                                  ;=================================================
   426                                  ; printf spec functions template
   427                                  ;
   428                                  ; Args:     %1 - max number of digits
   429                                  ;           %2 - bits in one digit
   430                                  ;           %3 - bit mask for one digit
   431                                  ;
   432                                  ; Assumes:  rax (higher half) - number
   433                                  ;           r10 - args stack ptr
   434                                  ;           r13 - buffer size
   435                                  ;           r8d - symbol counter
   436                                  ;
   437                                  ; Destr:    rax, rbx, rcx, rdx, rdi, rsi, r11, r12
   438                                  ;=================================================
   439                                  %macro PRINTF_SPEC_TEMPLATE 3
   440                                  
   441                                              test rax, rax
   442                                              jne %%notNull
   443                                  
   444                                              WRITE_TO_BUF '0'
   445                                  
   446                                              jmp %%whileBreak
   447                                  
   448                                  %%notNull:
   449                                              xor r12, r12 ; counter
   450                                              xor bl, bl
   451                                  
   452                                  %%whileBody:
   453                                              cmp r12, %1 ; sizeof
   454                                              jae %%whileBreak
   455                                  
   456                                              rol rax, %2
   457                                              mov ecx, eax
   458                                              and ecx, %3
   459                                              inc r12
   460                                  
   461                                              test bl, bl
   462                                              jne %%printSymbol
   463                                  
   464                                              test ecx, ecx
   465                                              je %%whileBody
   466                                  
   467                                              inc bl ; bl = 1
   468                                  %%printSymbol:
   469                                  
   470                                              mov cl, HexTable[ecx]
   471                                              WRITE_TO_BUF cl
   472                                  
   473                                              jmp %%whileBody
   474                                  %%whileBreak:
   475                                  
   476                                              INC_ARGS_PTRS
   477                                  
   478                                              ret
   479                                  %endmacro
   480                                  ;=================================================
   481                                  
   482                                  ;-------------------------------------------------
   483                                  ; printf binary
   484                                  ;
   485                                  ; Assumes:  rax (higher half) - number
   486                                  ;           r10 - args stack ptr
   487                                  ;           r13 - buffer size
   488                                  ;           r8d - symbol counter
   489                                  ;
   490                                  ; Destr:    rax, rbx, rcx, rdx, rdi, rsi, r11, r12
   491                                  ;-------------------------------------------------
   492                                  printf_spec_binary:
   493                                              WRITE_TO_BUF '0'
    75                              <1> 
    76 000003D2 4983FD40            <1>  cmp r13, BufCapacity
    77 000003D6 7229                <1>  jb %%noFlush
    78                              <1> 
    79                              <1>  FLUSH_BUFFER
    34 000003D8 52                  <2>  push rdx
    35                              <2> 
    36                              <2>  SYS_WRITE Buffer, r13
    13 000003D9 B801000000          <3>  mov rax, 0x01
    14 000003DE BF01000000          <3>  mov rdi, 0x01
    15 000003E3 48BE-               <3>  mov rsi, %1
    15 000003E5 [1000000000000000]  <3>
    16 000003ED 4C89EA              <3>  mov rdx, %2
    17 000003F0 0F05                <3>  syscall
    37                              <2> 
    38                              <2> 
    39 000003F2 C70425[50000000]00- <2>  mov dword [BufferSize], 0
    39 000003FA 000000              <2>
    40 000003FD 4D31ED              <2>  xor r13, r13
    41                              <2> 
    42 00000400 5A                  <2>  pop rdx
    80                              <1> %%noFlush:
    81                              <1> 
    82 00000401 41C685[10000000]30  <1>  mov byte [Buffer + r13], %1
    83 00000409 41FFC0              <1>  inc r8d
    84 0000040C 49FFC5              <1>  inc r13
   494                                              WRITE_TO_BUF 'b'
    75                              <1> 
    76 0000040F 4983FD40            <1>  cmp r13, BufCapacity
    77 00000413 7229                <1>  jb %%noFlush
    78                              <1> 
    79                              <1>  FLUSH_BUFFER
    34 00000415 52                  <2>  push rdx
    35                              <2> 
    36                              <2>  SYS_WRITE Buffer, r13
    13 00000416 B801000000          <3>  mov rax, 0x01
    14 0000041B BF01000000          <3>  mov rdi, 0x01
    15 00000420 48BE-               <3>  mov rsi, %1
    15 00000422 [1000000000000000]  <3>
    16 0000042A 4C89EA              <3>  mov rdx, %2
    17 0000042D 0F05                <3>  syscall
    37                              <2> 
    38                              <2> 
    39 0000042F C70425[50000000]00- <2>  mov dword [BufferSize], 0
    39 00000437 000000              <2>
    40 0000043A 4D31ED              <2>  xor r13, r13
    41                              <2> 
    42 0000043D 5A                  <2>  pop rdx
    80                              <1> %%noFlush:
    81                              <1> 
    82 0000043E 41C685[10000000]62  <1>  mov byte [Buffer + r13], %1
    83 00000446 41FFC0              <1>  inc r8d
    84 00000449 49FFC5              <1>  inc r13
   495                                  
   496                                              CHECK_REG_STACK_ARGS_BORDER
    92                              <1> 
    93 0000044C 4D85FF              <1>  test r15, r15
    94 0000044F 750B                <1>  jne %%Float
    95                              <1> 
    96                              <1> 
    97 00000451 4939EA              <1>  cmp r10, rbp
    98 00000454 751D                <1>  jne %%Exit
    99 00000456 4983C238            <1>  add r10, 16 + 8 * SavedArgs
   100                              <1> 
   101 0000045A EB17                <1>  jmp %%Exit
   102                              <1> %%Float:
   103 0000045C 488D45C0            <1>  lea rax, [rbp - 64]
   104                              <1> 
   105 00000460 4939C2              <1>  cmp r10, rax
   106 00000463 750E                <1>  jne %%Exit
   107                              <1> 
   108 00000465 4939EE              <1>  cmp r14, rbp
   109 00000468 7205                <1>  jb %%XmmArgsExist
   110                              <1> 
   111 0000046A 4D89F2              <1>  mov r10, r14
   112 0000046D EB04                <1>  jmp %%Exit
   113                              <1> 
   114                              <1> %%XmmArgsExist:
   115 0000046F 4C8D5538            <1>  lea r10, [rbp + 16 + 8 * SavedArgs]
   116                              <1> 
   117                              <1> 
   118                              <1> %%Exit:
   497 00000473 418B02                              mov eax, [r10]
   498 00000476 48C1E020                            shl rax, 32
   499                                              PRINTF_SPEC_TEMPLATE 32, 1, 0b1
   440                              <1> 
   441 0000047A 4885C0              <1>  test rax, rax
   442 0000047D 753F                <1>  jne %%notNull
   443                              <1> 
   444                              <1>  WRITE_TO_BUF '0'
    75                              <2> 
    76 0000047F 4983FD40            <2>  cmp r13, BufCapacity
    77 00000483 7229                <2>  jb %%noFlush
    78                              <2> 
    79                              <2>  FLUSH_BUFFER
    34 00000485 52                  <3>  push rdx
    35                              <3> 
    36                              <3>  SYS_WRITE Buffer, r13
    13 00000486 B801000000          <4>  mov rax, 0x01
    14 0000048B BF01000000          <4>  mov rdi, 0x01
    15 00000490 48BE-               <4>  mov rsi, %1
    15 00000492 [1000000000000000]  <4>
    16 0000049A 4C89EA              <4>  mov rdx, %2
    17 0000049D 0F05                <4>  syscall
    37                              <3> 
    38                              <3> 
    39 0000049F C70425[50000000]00- <3>  mov dword [BufferSize], 0
    39 000004A7 000000              <3>
    40 000004AA 4D31ED              <3>  xor r13, r13
    41                              <3> 
    42 000004AD 5A                  <3>  pop rdx
    80                              <2> %%noFlush:
    81                              <2> 
    82 000004AE 41C685[10000000]30  <2>  mov byte [Buffer + r13], %1
    83 000004B6 41FFC0              <2>  inc r8d
    84 000004B9 49FFC5              <2>  inc r13
   445                              <1> 
   446 000004BC EB65                <1>  jmp %%whileBreak
   447                              <1> 
   448                              <1> %%notNull:
   449 000004BE 4D31E4              <1>  xor r12, r12
   450 000004C1 30DB                <1>  xor bl, bl
   451                              <1> 
   452                              <1> %%whileBody:
   453 000004C3 4983FC20            <1>  cmp r12, %1
   454 000004C7 735A                <1>  jae %%whileBreak
   455                              <1> 
   456 000004C9 48D1C0              <1>  rol rax, %2
   457 000004CC 89C1                <1>  mov ecx, eax
   458 000004CE 83E101              <1>  and ecx, %3
   459 000004D1 49FFC4              <1>  inc r12
   460                              <1> 
   461 000004D4 84DB                <1>  test bl, bl
   462 000004D6 7506                <1>  jne %%printSymbol
   463                              <1> 
   464 000004D8 85C9                <1>  test ecx, ecx
   465 000004DA 74E7                <1>  je %%whileBody
   466                              <1> 
   467 000004DC FEC3                <1>  inc bl
   468                              <1> %%printSymbol:
   469                              <1> 
   470 000004DE 678A89[00000000]    <1>  mov cl, HexTable[ecx]
   471                              <1>  WRITE_TO_BUF cl
    75                              <2> 
    76 000004E5 4983FD40            <2>  cmp r13, BufCapacity
    77 000004E9 7229                <2>  jb %%noFlush
    78                              <2> 
    79                              <2>  FLUSH_BUFFER
    34 000004EB 52                  <3>  push rdx
    35                              <3> 
    36                              <3>  SYS_WRITE Buffer, r13
    13 000004EC B801000000          <4>  mov rax, 0x01
    14 000004F1 BF01000000          <4>  mov rdi, 0x01
    15 000004F6 48BE-               <4>  mov rsi, %1
    15 000004F8 [1000000000000000]  <4>
    16 00000500 4C89EA              <4>  mov rdx, %2
    17 00000503 0F05                <4>  syscall
    37                              <3> 
    38                              <3> 
    39 00000505 C70425[50000000]00- <3>  mov dword [BufferSize], 0
    39 0000050D 000000              <3>
    40 00000510 4D31ED              <3>  xor r13, r13
    41                              <3> 
    42 00000513 5A                  <3>  pop rdx
    80                              <2> %%noFlush:
    81                              <2> 
    82 00000514 41888D[10000000]    <2>  mov byte [Buffer + r13], %1
    83 0000051B 41FFC0              <2>  inc r8d
    84 0000051E 49FFC5              <2>  inc r13
   472                              <1> 
   473 00000521 EBA0                <1>  jmp %%whileBody
   474                              <1> %%whileBreak:
   475                              <1> 
   476                              <1>  INC_ARGS_PTRS
   151                              <2> 
   152 00000523 4939EA              <2>  cmp r10, rbp
   153 00000526 7209                <2>  jb %%regsLeft
   154 00000528 4939EE              <2>  cmp r14, rbp
   155 0000052B 7204                <2>  jb %%regsLeft
   156                              <2> 
   157 0000052D 4983C608            <2>  add r14, 8
   158                              <2> %%regsLeft:
   159 00000531 4983C208            <2>  add r10, 8
   477                              <1> 
   478 00000535 C3                  <1>  ret
   500                                  
   501                                  ;-------------------------------------------------
   502                                  ; printf octal
   503                                  ;
   504                                  ; Assumes:  rax (higher half) - number
   505                                  ;           r10 - args stack ptr
   506                                  ;           r13 - buffer size
   507                                  ;           r8d - symbol counter
   508                                  ;
   509                                  ; Destr:    rax, rbx, rcx, rdx, rdi, rsi, r11, r12
   510                                  ;-------------------------------------------------
   511                                  printf_spec_octal:
   512                                              WRITE_TO_BUF '0'
    75                              <1> 
    76 00000536 4983FD40            <1>  cmp r13, BufCapacity
    77 0000053A 7229                <1>  jb %%noFlush
    78                              <1> 
    79                              <1>  FLUSH_BUFFER
    34 0000053C 52                  <2>  push rdx
    35                              <2> 
    36                              <2>  SYS_WRITE Buffer, r13
    13 0000053D B801000000          <3>  mov rax, 0x01
    14 00000542 BF01000000          <3>  mov rdi, 0x01
    15 00000547 48BE-               <3>  mov rsi, %1
    15 00000549 [1000000000000000]  <3>
    16 00000551 4C89EA              <3>  mov rdx, %2
    17 00000554 0F05                <3>  syscall
    37                              <2> 
    38                              <2> 
    39 00000556 C70425[50000000]00- <2>  mov dword [BufferSize], 0
    39 0000055E 000000              <2>
    40 00000561 4D31ED              <2>  xor r13, r13
    41                              <2> 
    42 00000564 5A                  <2>  pop rdx
    80                              <1> %%noFlush:
    81                              <1> 
    82 00000565 41C685[10000000]30  <1>  mov byte [Buffer + r13], %1
    83 0000056D 41FFC0              <1>  inc r8d
    84 00000570 49FFC5              <1>  inc r13
   513                                  
   514                                              CHECK_REG_STACK_ARGS_BORDER
    92                              <1> 
    93 00000573 4D85FF              <1>  test r15, r15
    94 00000576 750B                <1>  jne %%Float
    95                              <1> 
    96                              <1> 
    97 00000578 4939EA              <1>  cmp r10, rbp
    98 0000057B 751D                <1>  jne %%Exit
    99 0000057D 4983C238            <1>  add r10, 16 + 8 * SavedArgs
   100                              <1> 
   101 00000581 EB17                <1>  jmp %%Exit
   102                              <1> %%Float:
   103 00000583 488D45C0            <1>  lea rax, [rbp - 64]
   104                              <1> 
   105 00000587 4939C2              <1>  cmp r10, rax
   106 0000058A 750E                <1>  jne %%Exit
   107                              <1> 
   108 0000058C 4939EE              <1>  cmp r14, rbp
   109 0000058F 7205                <1>  jb %%XmmArgsExist
   110                              <1> 
   111 00000591 4D89F2              <1>  mov r10, r14
   112 00000594 EB04                <1>  jmp %%Exit
   113                              <1> 
   114                              <1> %%XmmArgsExist:
   115 00000596 4C8D5538            <1>  lea r10, [rbp + 16 + 8 * SavedArgs]
   116                              <1> 
   117                              <1> 
   118                              <1> %%Exit:
   515 0000059A 418B02                              mov eax, [r10]
   516 0000059D 48C1E01F                            shl rax, 31
   517                                              PRINTF_SPEC_TEMPLATE 11, 3, 0b111
   440                              <1> 
   441 000005A1 4885C0              <1>  test rax, rax
   442 000005A4 753F                <1>  jne %%notNull
   443                              <1> 
   444                              <1>  WRITE_TO_BUF '0'
    75                              <2> 
    76 000005A6 4983FD40            <2>  cmp r13, BufCapacity
    77 000005AA 7229                <2>  jb %%noFlush
    78                              <2> 
    79                              <2>  FLUSH_BUFFER
    34 000005AC 52                  <3>  push rdx
    35                              <3> 
    36                              <3>  SYS_WRITE Buffer, r13
    13 000005AD B801000000          <4>  mov rax, 0x01
    14 000005B2 BF01000000          <4>  mov rdi, 0x01
    15 000005B7 48BE-               <4>  mov rsi, %1
    15 000005B9 [1000000000000000]  <4>
    16 000005C1 4C89EA              <4>  mov rdx, %2
    17 000005C4 0F05                <4>  syscall
    37                              <3> 
    38                              <3> 
    39 000005C6 C70425[50000000]00- <3>  mov dword [BufferSize], 0
    39 000005CE 000000              <3>
    40 000005D1 4D31ED              <3>  xor r13, r13
    41                              <3> 
    42 000005D4 5A                  <3>  pop rdx
    80                              <2> %%noFlush:
    81                              <2> 
    82 000005D5 41C685[10000000]30  <2>  mov byte [Buffer + r13], %1
    83 000005DD 41FFC0              <2>  inc r8d
    84 000005E0 49FFC5              <2>  inc r13
   445                              <1> 
   446 000005E3 EB66                <1>  jmp %%whileBreak
   447                              <1> 
   448                              <1> %%notNull:
   449 000005E5 4D31E4              <1>  xor r12, r12
   450 000005E8 30DB                <1>  xor bl, bl
   451                              <1> 
   452                              <1> %%whileBody:
   453 000005EA 4983FC0B            <1>  cmp r12, %1
   454 000005EE 735B                <1>  jae %%whileBreak
   455                              <1> 
   456 000005F0 48C1C003            <1>  rol rax, %2
   457 000005F4 89C1                <1>  mov ecx, eax
   458 000005F6 83E107              <1>  and ecx, %3
   459 000005F9 49FFC4              <1>  inc r12
   460                              <1> 
   461 000005FC 84DB                <1>  test bl, bl
   462 000005FE 7506                <1>  jne %%printSymbol
   463                              <1> 
   464 00000600 85C9                <1>  test ecx, ecx
   465 00000602 74E6                <1>  je %%whileBody
   466                              <1> 
   467 00000604 FEC3                <1>  inc bl
   468                              <1> %%printSymbol:
   469                              <1> 
   470 00000606 678A89[00000000]    <1>  mov cl, HexTable[ecx]
   471                              <1>  WRITE_TO_BUF cl
    75                              <2> 
    76 0000060D 4983FD40            <2>  cmp r13, BufCapacity
    77 00000611 7229                <2>  jb %%noFlush
    78                              <2> 
    79                              <2>  FLUSH_BUFFER
    34 00000613 52                  <3>  push rdx
    35                              <3> 
    36                              <3>  SYS_WRITE Buffer, r13
    13 00000614 B801000000          <4>  mov rax, 0x01
    14 00000619 BF01000000          <4>  mov rdi, 0x01
    15 0000061E 48BE-               <4>  mov rsi, %1
    15 00000620 [1000000000000000]  <4>
    16 00000628 4C89EA              <4>  mov rdx, %2
    17 0000062B 0F05                <4>  syscall
    37                              <3> 
    38                              <3> 
    39 0000062D C70425[50000000]00- <3>  mov dword [BufferSize], 0
    39 00000635 000000              <3>
    40 00000638 4D31ED              <3>  xor r13, r13
    41                              <3> 
    42 0000063B 5A                  <3>  pop rdx
    80                              <2> %%noFlush:
    81                              <2> 
    82 0000063C 41888D[10000000]    <2>  mov byte [Buffer + r13], %1
    83 00000643 41FFC0              <2>  inc r8d
    84 00000646 49FFC5              <2>  inc r13
   472                              <1> 
   473 00000649 EB9F                <1>  jmp %%whileBody
   474                              <1> %%whileBreak:
   475                              <1> 
   476                              <1>  INC_ARGS_PTRS
   151                              <2> 
   152 0000064B 4939EA              <2>  cmp r10, rbp
   153 0000064E 7209                <2>  jb %%regsLeft
   154 00000650 4939EE              <2>  cmp r14, rbp
   155 00000653 7204                <2>  jb %%regsLeft
   156                              <2> 
   157 00000655 4983C608            <2>  add r14, 8
   158                              <2> %%regsLeft:
   159 00000659 4983C208            <2>  add r10, 8
   477                              <1> 
   478 0000065D C3                  <1>  ret
   518                                  
   519                                  ;-------------------------------------------------
   520                                  ; printf hex
   521                                  ;
   522                                  ; Assumes:  rax (higher half) - number
   523                                  ;           r10 - args stack ptr
   524                                  ;           r13 - buffer size
   525                                  ;           r8d - symbol counter
   526                                  ;
   527                                  ; Destr:    rax, rbx, rcx, rdx, rdi, rsi, r11, r12
   528                                  ;-------------------------------------------------
   529                                  printf_spec_hex:
   530                                              WRITE_TO_BUF '0'
    75                              <1> 
    76 0000065E 4983FD40            <1>  cmp r13, BufCapacity
    77 00000662 7229                <1>  jb %%noFlush
    78                              <1> 
    79                              <1>  FLUSH_BUFFER
    34 00000664 52                  <2>  push rdx
    35                              <2> 
    36                              <2>  SYS_WRITE Buffer, r13
    13 00000665 B801000000          <3>  mov rax, 0x01
    14 0000066A BF01000000          <3>  mov rdi, 0x01
    15 0000066F 48BE-               <3>  mov rsi, %1
    15 00000671 [1000000000000000]  <3>
    16 00000679 4C89EA              <3>  mov rdx, %2
    17 0000067C 0F05                <3>  syscall
    37                              <2> 
    38                              <2> 
    39 0000067E C70425[50000000]00- <2>  mov dword [BufferSize], 0
    39 00000686 000000              <2>
    40 00000689 4D31ED              <2>  xor r13, r13
    41                              <2> 
    42 0000068C 5A                  <2>  pop rdx
    80                              <1> %%noFlush:
    81                              <1> 
    82 0000068D 41C685[10000000]30  <1>  mov byte [Buffer + r13], %1
    83 00000695 41FFC0              <1>  inc r8d
    84 00000698 49FFC5              <1>  inc r13
   531                                              WRITE_TO_BUF 'x'
    75                              <1> 
    76 0000069B 4983FD40            <1>  cmp r13, BufCapacity
    77 0000069F 7229                <1>  jb %%noFlush
    78                              <1> 
    79                              <1>  FLUSH_BUFFER
    34 000006A1 52                  <2>  push rdx
    35                              <2> 
    36                              <2>  SYS_WRITE Buffer, r13
    13 000006A2 B801000000          <3>  mov rax, 0x01
    14 000006A7 BF01000000          <3>  mov rdi, 0x01
    15 000006AC 48BE-               <3>  mov rsi, %1
    15 000006AE [1000000000000000]  <3>
    16 000006B6 4C89EA              <3>  mov rdx, %2
    17 000006B9 0F05                <3>  syscall
    37                              <2> 
    38                              <2> 
    39 000006BB C70425[50000000]00- <2>  mov dword [BufferSize], 0
    39 000006C3 000000              <2>
    40 000006C6 4D31ED              <2>  xor r13, r13
    41                              <2> 
    42 000006C9 5A                  <2>  pop rdx
    80                              <1> %%noFlush:
    81                              <1> 
    82 000006CA 41C685[10000000]78  <1>  mov byte [Buffer + r13], %1
    83 000006D2 41FFC0              <1>  inc r8d
    84 000006D5 49FFC5              <1>  inc r13
   532                                  
   533                                              CHECK_REG_STACK_ARGS_BORDER
    92                              <1> 
    93 000006D8 4D85FF              <1>  test r15, r15
    94 000006DB 750B                <1>  jne %%Float
    95                              <1> 
    96                              <1> 
    97 000006DD 4939EA              <1>  cmp r10, rbp
    98 000006E0 751D                <1>  jne %%Exit
    99 000006E2 4983C238            <1>  add r10, 16 + 8 * SavedArgs
   100                              <1> 
   101 000006E6 EB17                <1>  jmp %%Exit
   102                              <1> %%Float:
   103 000006E8 488D45C0            <1>  lea rax, [rbp - 64]
   104                              <1> 
   105 000006EC 4939C2              <1>  cmp r10, rax
   106 000006EF 750E                <1>  jne %%Exit
   107                              <1> 
   108 000006F1 4939EE              <1>  cmp r14, rbp
   109 000006F4 7205                <1>  jb %%XmmArgsExist
   110                              <1> 
   111 000006F6 4D89F2              <1>  mov r10, r14
   112 000006F9 EB04                <1>  jmp %%Exit
   113                              <1> 
   114                              <1> %%XmmArgsExist:
   115 000006FB 4C8D5538            <1>  lea r10, [rbp + 16 + 8 * SavedArgs]
   116                              <1> 
   117                              <1> 
   118                              <1> %%Exit:
   534 000006FF 418B02                              mov eax, [r10]
   535 00000702 48C1E020                            shl rax, 32
   536                                              PRINTF_SPEC_TEMPLATE 8, 4, 0b1111
   440                              <1> 
   441 00000706 4885C0              <1>  test rax, rax
   442 00000709 753F                <1>  jne %%notNull
   443                              <1> 
   444                              <1>  WRITE_TO_BUF '0'
    75                              <2> 
    76 0000070B 4983FD40            <2>  cmp r13, BufCapacity
    77 0000070F 7229                <2>  jb %%noFlush
    78                              <2> 
    79                              <2>  FLUSH_BUFFER
    34 00000711 52                  <3>  push rdx
    35                              <3> 
    36                              <3>  SYS_WRITE Buffer, r13
    13 00000712 B801000000          <4>  mov rax, 0x01
    14 00000717 BF01000000          <4>  mov rdi, 0x01
    15 0000071C 48BE-               <4>  mov rsi, %1
    15 0000071E [1000000000000000]  <4>
    16 00000726 4C89EA              <4>  mov rdx, %2
    17 00000729 0F05                <4>  syscall
    37                              <3> 
    38                              <3> 
    39 0000072B C70425[50000000]00- <3>  mov dword [BufferSize], 0
    39 00000733 000000              <3>
    40 00000736 4D31ED              <3>  xor r13, r13
    41                              <3> 
    42 00000739 5A                  <3>  pop rdx
    80                              <2> %%noFlush:
    81                              <2> 
    82 0000073A 41C685[10000000]30  <2>  mov byte [Buffer + r13], %1
    83 00000742 41FFC0              <2>  inc r8d
    84 00000745 49FFC5              <2>  inc r13
   445                              <1> 
   446 00000748 EB66                <1>  jmp %%whileBreak
   447                              <1> 
   448                              <1> %%notNull:
   449 0000074A 4D31E4              <1>  xor r12, r12
   450 0000074D 30DB                <1>  xor bl, bl
   451                              <1> 
   452                              <1> %%whileBody:
   453 0000074F 4983FC08            <1>  cmp r12, %1
   454 00000753 735B                <1>  jae %%whileBreak
   455                              <1> 
   456 00000755 48C1C004            <1>  rol rax, %2
   457 00000759 89C1                <1>  mov ecx, eax
   458 0000075B 83E10F              <1>  and ecx, %3
   459 0000075E 49FFC4              <1>  inc r12
   460                              <1> 
   461 00000761 84DB                <1>  test bl, bl
   462 00000763 7506                <1>  jne %%printSymbol
   463                              <1> 
   464 00000765 85C9                <1>  test ecx, ecx
   465 00000767 74E6                <1>  je %%whileBody
   466                              <1> 
   467 00000769 FEC3                <1>  inc bl
   468                              <1> %%printSymbol:
   469                              <1> 
   470 0000076B 678A89[00000000]    <1>  mov cl, HexTable[ecx]
   471                              <1>  WRITE_TO_BUF cl
    75                              <2> 
    76 00000772 4983FD40            <2>  cmp r13, BufCapacity
    77 00000776 7229                <2>  jb %%noFlush
    78                              <2> 
    79                              <2>  FLUSH_BUFFER
    34 00000778 52                  <3>  push rdx
    35                              <3> 
    36                              <3>  SYS_WRITE Buffer, r13
    13 00000779 B801000000          <4>  mov rax, 0x01
    14 0000077E BF01000000          <4>  mov rdi, 0x01
    15 00000783 48BE-               <4>  mov rsi, %1
    15 00000785 [1000000000000000]  <4>
    16 0000078D 4C89EA              <4>  mov rdx, %2
    17 00000790 0F05                <4>  syscall
    37                              <3> 
    38                              <3> 
    39 00000792 C70425[50000000]00- <3>  mov dword [BufferSize], 0
    39 0000079A 000000              <3>
    40 0000079D 4D31ED              <3>  xor r13, r13
    41                              <3> 
    42 000007A0 5A                  <3>  pop rdx
    80                              <2> %%noFlush:
    81                              <2> 
    82 000007A1 41888D[10000000]    <2>  mov byte [Buffer + r13], %1
    83 000007A8 41FFC0              <2>  inc r8d
    84 000007AB 49FFC5              <2>  inc r13
   472                              <1> 
   473 000007AE EB9F                <1>  jmp %%whileBody
   474                              <1> %%whileBreak:
   475                              <1> 
   476                              <1>  INC_ARGS_PTRS
   151                              <2> 
   152 000007B0 4939EA              <2>  cmp r10, rbp
   153 000007B3 7209                <2>  jb %%regsLeft
   154 000007B5 4939EE              <2>  cmp r14, rbp
   155 000007B8 7204                <2>  jb %%regsLeft
   156                              <2> 
   157 000007BA 4983C608            <2>  add r14, 8
   158                              <2> %%regsLeft:
   159 000007BE 4983C208            <2>  add r10, 8
   477                              <1> 
   478 000007C2 C3                  <1>  ret
   537                                  
   538                                  ;-------------------------------------------------
   539                                  ; printf float
   540                                  ;
   541                                  ; Assumes:  rax (higher half) - number
   542                                  ;           r10 - args stack ptr
   543                                  ;           r13 - buffer size
   544                                  ;           r8d - symbol counter
   545                                  ;
   546                                  ; Destr:    rax, rbx, rcx, rdx, rdi, rsi, r11, r12, xmm0, xmm1
   547                                  ;-------------------------------------------------
   548                                  printf_spec_float:
   549                                  
   550                                              CHECK_REG_STACK_FLOAT_ARGS_BORDER
   126                              <1> 
   127 000007C3 49F7DF              <1>  neg r15
   128 000007C6 4A8D44FD00          <1>  lea rax, [rbp + 8 * r15]
   129 000007CB 49F7DF              <1>  neg r15
   130                              <1> 
   131 000007CE 4939C6              <1>  cmp r14, rax
   132 000007D1 730E                <1>  jae %%NotXmmArgsExist
   133                              <1> 
   134 000007D3 4939EA              <1>  cmp r10, rbp
   135 000007D6 7306                <1>  jae %%NotRegsArgsExist
   136                              <1> 
   137 000007D8 4C8D7538            <1>  lea r14, [rbp + 16 + 8 * SavedArgs]
   138                              <1> 
   139 000007DC EB03                <1>  jmp %%NotXmmArgsExist
   140                              <1> %%NotRegsArgsExist:
   141 000007DE 4D89D6              <1>  mov r14, r10
   142                              <1> 
   143                              <1> %%NotXmmArgsExist:
   551                                  
   552 000007E1 F3410F7E06                          movq xmm0, [r14]                            ; xmm0 - double
   553                                  
   554                                              FLUSH_IF_NEEDED
    54                              <1> 
    55 000007E6 4D85ED              <1>  test r13, r13
    56 000007E9 7429                <1>  je %%isEmptyBuf
    57                              <1> 
    58                              <1>  FLUSH_BUFFER
    34 000007EB 52                  <2>  push rdx
    35                              <2> 
    36                              <2>  SYS_WRITE Buffer, r13
    13 000007EC B801000000          <3>  mov rax, 0x01
    14 000007F1 BF01000000          <3>  mov rdi, 0x01
    15 000007F6 48BE-               <3>  mov rsi, %1
    15 000007F8 [1000000000000000]  <3>
    16 00000800 4C89EA              <3>  mov rdx, %2
    17 00000803 0F05                <3>  syscall
    37                              <2> 
    38                              <2> 
    39 00000805 C70425[50000000]00- <2>  mov dword [BufferSize], 0
    39 0000080D 000000              <2>
    40 00000810 4D31ED              <2>  xor r13, r13
    41                              <2> 
    42 00000813 5A                  <2>  pop rdx
    59                              <1> %%isEmptyBuf:
    60                              <1> 
   555                                  
   556 00000814 4C8D2C25[4F000000]                  lea r13, [Buffer + BufCapacity - 1]         ; r13 - output str pointer
   557                                  
   558 0000081C 66480F7EC3                          movq rbx, xmm0                              ; rbx - raw xmm0
   559 00000821 4885DB                              test rbx, rbx
   560 00000824 790C                                jns .isPositive ; xmm0 >= 0
   561                                  
   562 00000826 F30F7EC8                            movq xmm1, xmm0
   563 0000082A 660FEFC0                            pxor xmm0, xmm0
   564 0000082E F20F5CC1                            subsd xmm0, xmm1
   565                                  .isPositive:
   566                                  
   567 00000832 F24C0F2CD8                          cvttsd2si r11, xmm0 ; convert float to int  ; r11 - int part
   568 00000837 F2490F2ACB                          cvtsi2sd xmm1, r11
   569 0000083C F20F5CC1                            subsd xmm0, xmm1
   570 00000840 F20F590425-                         mulsd xmm0, [double_1e6]
   570 00000845 [27000000]         
   571 00000849 F2480F2CC0                          cvttsd2si rax, xmm0                         ; rax - non-int part
   572                                  
   573                                              ; convert non-int part
   574 0000084E 41BC0A000000                        mov r12d, 10    ; base
   575 00000854 B906000000                          mov rcx, 6      ; width
   576                                  .flWhileBody:
   577 00000859 4831D2                              xor rdx, rdx
   578 0000085C 41F7F4                              div r12d
   579                                              ; eax = div
   580                                              ; edx = mod
   581                                  
   582 0000085F 8A92[00000000]                      mov dl, HexTable[rdx]
   583 00000865 41885500                            mov byte [r13], dl
   584 00000869 49FFCD                              dec r13
   585 0000086C 48FFC9                              dec rcx
   586                                  
   587 0000086F 4885C9                              test rcx,rcx
   588 00000872 75E5                                jne .flWhileBody
   589                                  
   590 00000874 41C645002E                          mov byte [r13], '.'
   591 00000879 49FFCD                              dec r13
   592                                  
   593 0000087C 4C89D8                              mov rax, r11                                ; rax - int part
   594                                  
   595                                              ; convert int part
   596                                  .intWhileBody:
   597 0000087F 4831D2                              xor rdx, rdx
   598 00000882 41F7F4                              div r12d
   599                                              ; eax = div
   600                                              ; edx = mod
   601                                  
   602 00000885 8A92[00000000]                      mov dl, HexTable[rdx]
   603 0000088B 41885500                            mov byte [r13], dl
   604 0000088F 49FFCD                              dec r13
   605                                  
   606 00000892 85C0                                test eax, eax
   607 00000894 75E9                                jne .intWhileBody
   608                                  
   609 00000896 4885DB                              test rbx, rbx
   610 00000899 7908                                jns .isPositive2 ; xmm0 >= 0
   611                                  
   612 0000089B 41C645002D                          mov byte [r13], '-'
   613 000008A0 49FFCD                              dec r13
   614                                  .isPositive2:
   615                                  
   616 000008A3 49BB-                               mov r11, Buffer + BufCapacity - 1
   616 000008A5 [4F00000000000000] 
   617 000008AD 4D29EB                              sub r11, r13
   618                                  
   619 000008B0 4153                                push r11
   620 000008B2 49FFC5                              inc r13
   621                                  
   622                                              SYS_WRITE r13, r11
    13 000008B5 B801000000          <1>  mov rax, 0x01
    14 000008BA BF01000000          <1>  mov rdi, 0x01
    15 000008BF 4C89EE              <1>  mov rsi, %1
    16 000008C2 4C89DA              <1>  mov rdx, %2
    17 000008C5 0F05                <1>  syscall
   623                                  
   624 000008C7 415B                                pop r11
   625 000008C9 4D01D8                              add r8, r11
   626 000008CC 4D31ED                              xor r13, r13 ; buffer is flushed
   627                                  
   628                                              ; stack pointers increment
   629 000008CF 4939EE                              cmp r14, rbp
   630 000008D2 720D                                jb .xmmArgs
   631                                  
   632 000008D4 4983C608                            add r14, 8
   633                                  
   634 000008D8 4939EA                              cmp r10, rbp
   635 000008DB 7208                                jb .regsLeft
   636                                  
   637 000008DD 4983C208                            add r10, 8
   638                                  
   639 000008E1 4983EE08                .xmmArgs:   sub r14, 8
   640                                  
   641                                  .regsLeft:
   642 000008E5 C3                                  ret
   643                                  ;-------------------------------------------------
   644                                  
   645                                  ;-------------------------------------------------
   646                                  ; writes number of symbols pronted so far
   647                                  ;
   648                                  ; Args:     r10 - args stack ptr
   649                                  ;           r13 - buffer size
   650                                  ;           r8d - symbol counter
   651                                  ;
   652                                  ; Destr:    rax
   653                                  ;-------------------------------------------------
   654                                  printf_spec_n:
   655                                  
   656                                              CHECK_REG_STACK_ARGS_BORDER
    92                              <1> 
    93 000008E6 4D85FF              <1>  test r15, r15
    94 000008E9 750B                <1>  jne %%Float
    95                              <1> 
    96                              <1> 
    97 000008EB 4939EA              <1>  cmp r10, rbp
    98 000008EE 751D                <1>  jne %%Exit
    99 000008F0 4983C238            <1>  add r10, 16 + 8 * SavedArgs
   100                              <1> 
   101 000008F4 EB17                <1>  jmp %%Exit
   102                              <1> %%Float:
   103 000008F6 488D45C0            <1>  lea rax, [rbp - 64]
   104                              <1> 
   105 000008FA 4939C2              <1>  cmp r10, rax
   106 000008FD 750E                <1>  jne %%Exit
   107                              <1> 
   108 000008FF 4939EE              <1>  cmp r14, rbp
   109 00000902 7205                <1>  jb %%XmmArgsExist
   110                              <1> 
   111 00000904 4D89F2              <1>  mov r10, r14
   112 00000907 EB04                <1>  jmp %%Exit
   113                              <1> 
   114                              <1> %%XmmArgsExist:
   115 00000909 4C8D5538            <1>  lea r10, [rbp + 16 + 8 * SavedArgs]
   116                              <1> 
   117                              <1> 
   118                              <1> %%Exit:
   657                                  
   658 0000090D 498B02                              mov rax, [r10]
   659                                  
   660 00000910 448900                              mov dword [rax], r8d
   661                                  
   662                                              INC_ARGS_PTRS
   151                              <1> 
   152 00000913 4939EA              <1>  cmp r10, rbp
   153 00000916 7209                <1>  jb %%regsLeft
   154 00000918 4939EE              <1>  cmp r14, rbp
   155 0000091B 7204                <1>  jb %%regsLeft
   156                              <1> 
   157 0000091D 4983C608            <1>  add r14, 8
   158                              <1> %%regsLeft:
   159 00000921 4983C208            <1>  add r10, 8
   663                                  
   664 00000925 C3                                  ret
   665                                  ;-------------------------------------------------
   666                                  
   667                                  ;+++++++++++++++++++++++++++++++++++++++++++++++++
   668                                  segment .data
   669                                  
   670                                  
   671 00000000 303132333435363738-     HexTable:   db "0123456789abcdef"
   671 00000009 39616263646566     
   672                                  
   673                                  BufCapacity equ 64
   674                                  
   675 00000010 00<rep 40h>             Buffer:     times BufCapacity db 0
   676 00000050 00000000                BufferSize: dd 0
   677                                  
   678                                  ;+++++++++++++++++++++++++++++++++++++++++++++++++
   679                                  segment .rodata
   680                                  
   681 00000000 5072696E7466206572-     UnknownSpecErrorMsg:    db "Printf error. Unknown format specified", 0x0a
   681 00000009 726F722E20556E6B6E-
   681 00000012 6F776E20666F726D61-
   681 0000001B 742073706563696669-
   681 00000024 65640A             
   682                                  UnknownSpecErrorMsgLen  equ $ - UnknownSpecErrorMsg
   683                                  
   684 00000027 0000000080842E41        double_1e6:  dq 0x412e848000000000
   685                                  double_1     equ 0x3ff0000000000000
   686                                  
   687                                  ; options in ASCII order: %, <large gap>, b,  c,  d,  f,  n,  o,  s,  x
   688                                  ;                         37              98  99 100 102 110 111 115 120
   689                                  printf_jmp_table:
   690 0000002F [E300000000000000]                  dq _Z8myprintfPKcz.spec_bin
   691 00000037 [DC00000000000000]                  dq _Z8myprintfPKcz.spec_char
   692 0000003F [F100000000000000]                  dq _Z8myprintfPKcz.spec_dec
   693 00000047 [1401000000000000]                  times ('f' - 'd' - 1) dq _Z8myprintfPKcz.spec_error
   694 0000004F [0601000000000000]                  dq _Z8myprintfPKcz.spec_float
   695 00000057 [1401000000000000]-                 times ('n' - 'f' - 1) dq _Z8myprintfPKcz.spec_error
   695 00000057 <rep 7h>           
   696 0000008F [0D01000000000000]                  dq _Z8myprintfPKcz.spec_n
   697 00000097 [EA00000000000000]                  dq _Z8myprintfPKcz.spec_oct
   698 0000009F [1401000000000000]-                 times ('s' - 'o' - 1) dq _Z8myprintfPKcz.spec_error
   698 0000009F <rep 3h>           
   699 000000B7 [FF00000000000000]                  dq _Z8myprintfPKcz.spec_str
   700 000000BF [1401000000000000]-                 times ('x' - 's' - 1) dq _Z8myprintfPKcz.spec_error
   700 000000BF <rep 4h>           
   701 000000DF [F800000000000000]                  dq _Z8myprintfPKcz.spec_hex
   702                                  
